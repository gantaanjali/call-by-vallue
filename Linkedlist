
#include <iostream>
#include <stdio.h>
using namespace std;
struct node{
    int data;
    struct node *next;
}*first=NULL;
void createnode(int A[], int n){
    struct node *t, *last;
    first = new node;
    first->data=A[0];
    first->next=NULL;
    last=first;
    for(int i=1;i<n;i++){
        t=new node;
        t->data=A[i];
        t->next=NULL;
        last->next=t;
        last =t;
    }
}
//display the list of element
void Display(struct node *p){
    while(p!=NULL){
        cout<<p->data<<endl;
        p=p->next;
    }
}
//total count in the list
int count(struct node *p)
{
    int cnt=0;
    while(p!=0){
        cnt++;
        p=p->next;
    }
    cout<<cnt<<endl;
}
//add the summ of the elements in the list
void addlist(struct node *p){
    int sum=0;
    while(p!=0){
        sum=sum+(p->data);
        p=p->next;
    }
    cout<<sum<<endl;
}
//found the maximum number in the list
void maxlist(struct node *p){
    int m=0;
    while(p!=0){
        if(p->data>m){
            m=p->data;
            p=p->next;
        }
    }
    cout<<m<<endl;
}
//find the elements//leaner serch
void findele(struct node *p){
    int k=4;
    while(p!=0){
        if(k==p->data){
            cout<<p->data<<endl;
        }
        p=p->next;
    }
}
void search(struct node *p){
    int k=4;
    struct node *q=NULL;
    while(p!=NULL){
        if(k==p->data){
            q->next=p->next;
            p->next=first;
            first=p;
        }
        q=p;
        p=p->next;
    }
}
//insertion
void insert(struct node *p,int index,int x){
    if(index<0 && index > count(p))
    return;
    struct node *t=new node;
    t->data=x;
    if(index==0){
        t->next=first;
        first=t;
    }
    else{
        for(int i=0;i<index-1;i++){
            p=p->next;
            t->next=p->next;
            p->next=t;
        }
    }
}
int main()
{
   int a[]={1,2,3,4,5};
   createnode(a,5);
   Display(first);
   count(first);
   addlist(first);
   maxlist(first);
   findele(first);
   search(first);
   Display(first);
   insert(first,0,10);
   Display(first);
   
}
